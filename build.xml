<!-- Build file for our first application -->
<project name="Selena" default="test-with-selenium">

    <!-- If the file was not imported, set the selena dir to the directory
        containing this build file. (When imported, ${ant.file} is the importer
        file. The importer should be responsible for defining Selena dir -->
    <dirname file="${ant.file}" property="antfile.dir"/>
    <condition property="selena.dir" value="${antfile.dir}">
        <not>
            <isset property="${selena.dir}"/>
        </not>
    </condition>

    <property file="${basedir}${file.separator}build.properties"/>
    <property file="${basedir}${file.separator}Selena.properties"/>

    <property name="output.dir"             location="${basedir}${file.separator}build"/>
    <property name="config.dir"             location="${basedir}${file.separator}config"/>
    <property name="uixmls.dir"             location="${config.dir}${file.separator}uixmls"/>
    <property name="testng.dir"             location="${config.dir}${file.separator}testng"/>
    <property name="src.dir"                location="${basedir}${file.separator}src" />
    <property name="lib.dir"                location="${selena.dir}${file.separator}lib"/>
    <property name="vendor.dir"             location="${selena.dir}${file.separator}vendor"/>
    <property name="bin.dir"                location="${output.dir}${file.separator}bin"/>
    <property name="jar.dir"                location="${output.dir}${file.separator}jar"/>
    <property name="report.dir"             location="${output.dir}${file.separator}reports"/>
    <property name="log.dir"                location="${output.dir}${file.separator}logs"/>
	<property name="image.dir"              location="${output.dir}${file.separator}images"/>
    <property name="firefoxProfileTemplate" location="${selena.dir}${file.separator}config${file.separator}profile"/>
    <property name="reportNGcss"            location="${selena.dir}${file.separator}reportStyle.css"/>
    <property name="testngXml"              value="**/*.xml"/>
	<property name="suiteThreadPoolSize"    value="1"/>
	<property name="reportNGListener"       value="org.uncommons.reportng.HTMLReporter,org.uncommons.reportng.JUnitXMLReporter"/>	
	<property name="customListener"         value=""/>

    <target name="initConfig">
        <!-- Setting default properties. ${basedir} will be the implementor porject's
        basedir. When not imported, it will be the Selena's base dir. -->
        <propertyfile file="${basedir}${file.separator}Selena.properties">
            <entry key="selenium.host"
                    default="localhost"
                    type="string"
            />
            <entry key="selenium.port"
                    default="4444"
                    type="string"
            />
            <entry key="selenium.browser"
                    default="*chrome"
                    type="string"
            />
            <entry key="selenium.baseUrl"
                    default="http://www.google.com"
                    type="string"
            />
            <entry key="selenium.delay.time" default="0" type="int"/>
        </propertyfile>
    </target>

    <target name="initProject" depends="initConfig">
        <copy includeemptydirs="true"
             todir="${basedir}${file.separator}config"
             overwrite="false"
        >
            <fileset dir="${selena.dir}${file.separator}skeleton${file.separator}config"/>
        </copy>
        <mkdir dir="src"/>
    </target>


    <target name="clean" description="Remove all generated content">
        <delete dir="${output.dir}"/>
    </target>


    <target name="reportDir">
        <mkdir dir="${report.dir}" />
        <mkdir dir="${image.dir}" />
    </target>

    <target name="logDir">
        <mkdir dir="${log.dir}" />
    </target>

    <target name="buildDirs">
        <mkdir dir="${output.dir}"/>
        <mkdir dir="${jar.dir}" />
        <mkdir dir="${bin.dir}" />
    </target>

    <target name="prepare" depends="clean, reportDir, buildDirs"
            description="Create all needed dirs">

        <path id="classpath">
            <fileset dir="${jar.dir}" includes="**/*.jar" />
            <fileset dir="${selena.dir}/lib" includes="**/*.jar" />
            <fileset dir="${lib.dir}" includes="**/*.jar" />
            <fileset dir="${bin.dir}" includes="**/*.class"/>
        </path>

    </target>


    <target name="checkstyle" depends="logDir">
        <mkdir dir="${log.dir}${file.separator}checkstyle" />
        <path id="checkstylePath">
            <fileset dir="${lib.dir}" includes="**/*.jar" />
            <fileset dir="${selena.dir}/lib" includes="**/*.jar" />
        </path>

        <taskdef resource="checkstyletask.properties"
        classpath="${selena.dir}${file.separator}lib${file.separator}checkstyle-all-5.1.jar"/>

        <checkstyle classpathref="checkstylePath"
        config="${selena.dir}${file.separator}config${file.separator}checkstyle_config.xml">
            <fileset dir="${src.dir}" includes="**/*.java"/>
            <formatter type="plain"/>
            <formatter type="xml" toFile="${log.dir}${file.separator}checkstyle${file.separator}checkstyle.xml"/>
        </checkstyle>
    </target>


    <target name="buildSelena" depends="prepare"
            description="compile Selena lib">
        <javac srcdir="${selena.dir}${file.separator}src"
                destdir="${bin.dir}"
                debug="true"
                includes="**/*.java"
                classpathref="classpath"
                includeantruntime="false"
                debuglevel="lines,vars,source"
        />
        <jar destfile="${jar.dir}${file.separator}Selena.jar" basedir="${bin.dir}" />
    </target>


    <target name="buildTestsuite" depends="prepare, checkstyle, buildSelena"
            description="Compiles the implementor project">
        <javac srcdir="${src.dir}"
                destdir="${bin.dir}"
                debug="true"
                includes="**/*.java"
                classpathref="classpath"
                includeantruntime="false"
                debuglevel="lines,vars,source"
        >
<!--            <compilerarg value="-Xlint"/>-->
        </javac>
        <jar destfile="${jar.dir}${file.separator}TestSuite.jar" basedir="${bin.dir}" />
        <buildnumber file="version"/>
    </target>


    <target name="test" depends="prepare, buildSelena">
        <path id="classpath.test">
            <path refid="classpath"/>
            <pathelement location="${selena.dir}${file.separator}tests"/>
        </path>
        <javac srcdir="${selena.dir}${file.separator}tests"
                verbose="false"
                debug="true"
                includeantruntime="false"
                debuglevel="lines,vars,source">
            <classpath refid="classpath.test"/>
        </javac>
        <junit>
            <classpath refid="classpath.test" />
            <formatter type="plain" usefile="false" />
            <batchtest fork="false">
                <fileset dir="${selena.dir}${file.separator}tests" includes="**/*.java"/>
            </batchtest>
        </junit>

    </target>


    <target name="runtests" depends="prepare, buildTestsuite">
        <property name="testngOutput" value="${report.dir}${file.separator}testNG"/>
        <mkdir dir="" />
        <taskdef  resource="testngtasks" classpath="${selena.dir}${file.separator}lib${file.separator}testng.jar"/>
        <path id="classpath.testNg">
            <fileset dir="${jar.dir}" includes="**/*.jar" />
            <fileset dir="${selena.dir}/lib" includes="**/*.jar" />
            <fileset dir="${lib.dir}" includes="**/*.jar" />
            <fileset dir="${bin.dir}" includes="**/*.class"/>
        </path>
        <testng 
        	    classpathref="classpath.testNg"
		        outputDir="${report.dir}/testNG"
                suitethreadpoolsize="${suiteThreadPoolSize}"
                workingDir="${testngOutput}"
                failureproperty="testngfail"
		        haltOnfailure="false"
                configfailurepolicy="continue"
		        delegateCommandSystemProperties="true"
                useDefaultListeners="false"
        	    listeners="${reportNGListener},${customListener}"
		>

            <xmlfileset dir="${testng.dir}" includes="${testngXml}"/>

            <sysproperty key="org.uncommons.reportng.title"     value="Automated Test Report"/>
		   <sysproperty key="org.uncommons.reportng.frames"     value="true"/>
		   <sysproperty key="org.uncommons.reportng.stylesheet" value="${reportNGcss}"/>
           <sysproperty key="org.uncommons.reportng.escape-output" value="on"/>
        	
        	

            <sysproperty key="configfilename"               value="${config.file}"/>
            <sysproperty key="selenium.baseUrl"             value="${selenium.baseUrl}" />
            <sysproperty key="selenium.host"                value="${selenium.host}" />
            <sysproperty key="selenium.port"                value="${selenium.port}" />
            <sysproperty key="selenium.browser"             value="${selenium.browser}" />
            <sysproperty key="selenium.delay.time"          value="${selenium.delay.time}" />
            <sysproperty key="uixmls.dir"                   value="${uixmls.dir}" />
            <sysproperty key="image.dir"                    value="${image.dir}" />        	
        	<sysproperty key="report.dir"                   value="${report.dir}${file.separator}testNG${file.separator}html" />
            <sysproperty key="screenshot.dir"               value="${report.dir}${file.separator}testNG${file.separator}html${file.separator}images" />
            <sysproperty key="config.dir"                   value="${config.dir}" />
            <sysproperty key="basedir"                      value="${basedir}" />
        </testng>
        <move todir="${log.dir}${file.separator}testNG" overwrite="true">
            <fileset dir="${report.dir}${file.separator}testNG${file.separator}xml"/>
        </move>
        <fail if="${testngfail}" message="At least one of the tests failed."/>
    </target>


    <target name="selenium-start">
        <java jar="${vendor.dir}${file.separator}selenium-server.jar"
		fork="true"
		spawn="true">
            <arg line="-firefoxProfileTemplate ${firefoxProfileTemplate}"/>
        </java>
        <sleep seconds="1"/>
    </target>


    <target name="selenium-stop">
        <get taskname="selenium-shutdown"
		src="http://localhost:4444/selenium-server/driver/?cmd=shutDownSeleniumServer"
		dest="${output.dir}/result.txt"/>
        <delete file="${output.dir}${file.separator}result.txt"/>
    </target>


    <target
        name="test-with-selenium"
        depends="selenium-start, runtests, selenium-stop"
        description="Spawns a selenium server on localhost, runs the tests and stops the server"/>

</project>
